name: Deploy Portfolio Website

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

# Required for OIDC
permissions:
  id-token: write
  contents: read

jobs:
  # Terraform Infrastructure Job
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    outputs:
      bucket-name: ${{ steps.terraform-output.outputs.bucket-name }}
      cloudfront-id: ${{ steps.terraform-output.outputs.cloudfront-id }}
      website-url: ${{ steps.terraform-output.outputs.website-url }}
      role-arn: ${{ steps.terraform-output.outputs.role-arn }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    # Configure AWS credentials using OIDC
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-Terraform

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Validates the configuration files in a directory
    - name: Terraform Validate
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -out=tfplan

    # Apply the changes required to reach the desired state of the configuration
    # Only run on push to main/master branch
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: terraform apply -auto-approve tfplan

    # Get Terraform outputs
    - name: Get Terraform Outputs
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      id: terraform-output
      run: |
        echo "bucket-name=$(terraform output -raw website_bucket_name)" >> $GITHUB_OUTPUT
        echo "cloudfront-id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
        echo "website-url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT
        echo "role-arn=$(terraform output -raw github_actions_role_arn)" >> $GITHUB_OUTPUT

  # Build and Deploy Website Job
  deploy:
    name: 'Build and Deploy Website'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    # Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4

    # Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    # Install dependencies
    - name: Install dependencies
      run: npm ci

    # Build the application
    - name: Build application
      run: npm run build

    # Configure AWS credentials using OIDC
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ needs.terraform.outputs.role-arn }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-Deploy

    # Deploy to S3
    - name: Deploy to S3
      run: |
        aws s3 sync dist/ s3://${{ needs.terraform.outputs.bucket-name }}/ --delete --cache-control "public, max-age=31536000, immutable" --exclude "*.html" --exclude "service-worker.js"
        aws s3 sync dist/ s3://${{ needs.terraform.outputs.bucket-name }}/ --delete --cache-control "public, max-age=0, must-revalidate" --include "*.html" --include "service-worker.js"

    # Invalidate CloudFront
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ needs.terraform.outputs.cloudfront-id }} --paths "/*"

    # Output deployment info
    - name: Deployment Complete
      run: |
        echo "ðŸš€ Deployment successful!"
        echo "Website URL: ${{ needs.terraform.outputs.website-url }}"
        echo "S3 Bucket: ${{ needs.terraform.outputs.bucket-name }}"
        echo "CloudFront Distribution: ${{ needs.terraform.outputs.cloudfront-id }}"
